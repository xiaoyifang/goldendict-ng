{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>GoldenDict-ng is an advanced dictionary lookup program.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Supports many dictionary formats, such as MDX, DSL, StarDict, Zim...</li> <li>Presents lookup results of multiple dictionaries in the same page</li> <li>Supports special types of \"dictionaries\", such as external program, website, audio files...</li> <li>Lots of auxiliary features<ul> <li>Popup window</li> <li>Full text search</li> <li>Anki integration</li> <li>Transliteration for some languages</li> <li>Word stemming and spelling correction via Hunspell's morphology analysis </li> <li>Unicode case, diacritics, punctuation and whitespace folding (e.g. typing 'Grussen' would yield 'gr\u00fc\u00dfen' in German dictionaries).</li> <li>...</li> </ul> </li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":"<p>On Windows 11 with default theme:</p> <p></p> <p>On macOS with dark reader mode and native system dark theme </p> <p></p> <p>On Linux with custom Qt color theme</p> <p></p>"},{"location":"#project-history","title":"Project history","text":"<p>This project is forked from the original GoldenDict which was developed at http://goldendict.org/</p> <p>The <code>-ng</code> in name means \"next generation\".</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#index-file","title":"Index file","text":"<p>Each index file has 4 sections.</p> <ol> <li><code>IdxHeader</code>:</li> <li><code>ExtraInfo</code> (Being used but unnamed in source code):</li> <li><code>Chunks</code>:</li> <li><code>BtreeIndex</code>:</li> </ol> <p>The <code>IdxHeader</code> are 32bits blocks of various meta info of the index. The most important info are <code>chunksOffset</code> and <code>indexRootOffset</code> pointing to the starting offset of <code>BtreeIndex</code> and <code>Chunks</code>.</p> <p>Some dicts only have one <code>ExtraInfo</code>: the <code>dictionaryName</code> which is an uint32 size of a string followed and the string.</p> <p>Each chunk contains uint32 size of uncompressed data, uint32 size of zlib compressed data, and the zlib compressed data.</p> <p>The <code>Chunks</code> maybe used by both <code>IdxHeader</code> and <code>BtreeIndex</code>.</p> <p>By adding new a new chunk to <code>Chunks</code> and store an offset to <code>IdxHeader</code>, <code>ExtraInfo</code> can store arbitrary long information.</p> <p><code>BtreeIndex</code> is a zlib compressed typical btree implementation in which each Node will include <code>word</code> info and a <code>offset</code> that pointing to corresponding <code>chunk</code>'s position.</p> <p>Note that a <code>chunk</code> only includes necessary data to find an article, and it does not contain the <code>word</code>.</p> <p>The exact data in <code>chunk</code> is decided and interpreted by dictionary implementations. For example, the starting and ending position of an article in a dictionary file.</p>"},{"location":"architecture/#whats-under-the-hood-after-a-word-is-queried","title":"What's under the hood after a word is queried?","text":"<p>After typing a word into the search box and press enter, the embedded browser will load <code>gdlookup://localhost?word=&lt;wantted word&gt;</code>. This url will be handled by Qt webengine's Url Scheme handler. The returned html page will be composed in the ArticleMaker which will initiate some DataRequest on dictionary formats. Resource files will be requested via <code>bres://</code> or <code>qrc://</code> which will went through a similar process.</p> <p>TODO: other subsystems.</p>"},{"location":"custom_dictionary/","title":"Customize Dictionary","text":"<p>A <code>metadata.toml</code>, which uses toml format, can be used to customize or override some properties of a certain dictionary. It is also used in auto grouping by metadata</p> <p>The <code>metadata.toml</code> should be placed on each dictionary's root folder (beside dictionary files) like</p> <pre><code>.\n\u251c\u2500\u2500 Cambridge\n\u2502    \u251c\u2500\u2500 metadata.toml &lt; here\n\u2502    \u251c\u2500\u2500 Cambridge.idx\n\u2502    \u251c\u2500\u2500 Cambridge.info\n\u2502    \u251c\u2500\u2500 Cambridge.syn\n\u2502    \u2514\u2500\u2500 Cambridge.dict.dz\n\u2514\u2500\u2500 Collins\n     \u251c\u2500\u2500 metadata.toml &lt; here\n     \u251c\u2500\u2500 res.zip\n     \u2514\u2500\u2500 Collins.dsl\n</code></pre>"},{"location":"custom_dictionary/#override-display-name","title":"Override display name","text":"<p>Some dictionary formats' display is embedded inside the dictionary, which cannot be easily changed, but you can add the following to override it.</p> <pre><code>[metadata]\nname = \"New Name\"\n</code></pre> <p>This <code>New Name</code> will be appeared as the dictionary name.</p>"},{"location":"custom_dictionary/#disable-full-text-search","title":"Disable full-text search","text":"<pre><code>fts=false\n\n[metadata]\nname=\"New Name\"\n</code></pre> <p>The <code>fts</code> field's value can be <code>on/off</code>, <code>1/0</code> ,<code>true/false</code> etc.</p> <pre><code>fts=false\n</code></pre> <p>will disable the current dictionary's full-text search.</p> <p>You can check the full-text search status on each dictionary's info dialog.</p> <p></p> <p>Note that it is possible to enable full text for a single dictionary by disabling full-text search in the Preferences dialog, and set <code>fts=true</code> for that dictionary.</p>"},{"location":"developer/","title":"Start develop","text":"<p>If you know some C++ and optionally some Qt, you can start to modify GoldenDict right now.</p> <p>This page is a brief introduction on how to get started.</p> <p>For technical details see how to build from source.</p>"},{"location":"developer/#install-qt","title":"Install Qt","text":"<p>To install Qt on macOS or Windows, use the Qt Online Installer. It can be downloaded from Qt for Open Source.</p> <p>Those Qt components are needed:</p> <ul> <li>Qt</li> <li>6.7.2 (Or another version)<ul> <li>MSVC 2019 (or MSVC 2022)</li> <li>Qt5 Compatible Module</li> <li>Additional Libraries</li> <li>Qt Image formats</li> <li>Qt MultiMedia</li> <li>Qt Positioning</li> <li>Qt SerialPort (? super weird here, but it is needed.)</li> <li>Qt Speech</li> <li>Qt Webchannel</li> <li>Qt Webengine</li> </ul> </li> <li>Qt Creator (optional)<ul> <li>CMake</li> <li>Ninja</li> </ul> </li> </ul> <p>Note that MinGW is not supported.</p> <p>CMake and Ninja are needed.</p>"},{"location":"developer/#install-a-compiler","title":"Install a compiler","text":"<p>For windows, MSVC can be obtained by installing Visual Studio's \"Desktop development with C++\".</p> <p>For macOS, install XCode.</p>"},{"location":"developer/#obtain-dependencies","title":"Obtain dependencies","text":"<p>For Windows, prebuilt libraries will be automatically downloaded.</p> <p>For macOS, install Homebrew and install related packages as described in how to build from source or search <code>brew install</code> command in macOS release's build file.</p>"},{"location":"developer/#build","title":"Build","text":"<p>First, get GoldenDict's source code by Cloning a repository.</p> <p>Then choose your favorite IDE/editor and load the <code>CMakeLists.txt</code>. If unsure, just use Qt Creator.</p>"},{"location":"developer/#qt-creator","title":"Qt Creator","text":"<p>Open <code>CMakeLists.txt</code> from Qt Creator, then you wil choose a \"Kit\" which is pretty much a Qt installation.</p> <p>Qt Creator usually can auto-detect your Qt installation. In case it doesn't, check out \"Kit\" settings. Note that, the compiler must be set to MSVC on Windows.</p> <p>By default, everything will be built but you can disable ffmpeg, epwing...</p> <p></p> <p>Then, hit the \"Run\" button at bottom-right corner should build and run GoldenDict.</p>"},{"location":"developer/#command-line-only","title":"Command Line only","text":"<p>See how to build from source.</p> <p>Qt's doc: Building projects on the command line</p>"},{"location":"developer/#visual-studio","title":"Visual Studio","text":"<p>VS2022 has CMake support. After opening the source code folder, VS will starts to configure CMake but likely won't succeed.</p> <p>You need to add Qt's path and other options to \"CMake command arguments\". Then, \"save\" the dialog with Ctrl+S or click one of the many \"(re)configure cache\" buttons.</p> <p></p> <p>Click run will build the project, but the <code>.exe</code> would not run, because the dependencies are not copied.</p> <p>Simply click \"install\", which is actually copying dependencies.</p> <p></p>"},{"location":"developer/#visual-studio-code","title":"Visual Studio Code","text":"<p>Install CMake Tools.</p> <p>Then open GoldenDict's folder, and the CMake extension will kicks in.</p> <p>Then add Qt's path and various other options to configure arguments.</p> <pre><code>-DCMAKE_PREFIX_PATH={Your Qt install path}\\6.7.2\\msvc2019_64\n</code></pre> <p></p>"},{"location":"developer/#clion","title":"CLion","text":""},{"location":"developer/#xcode","title":"XCode","text":""},{"location":"developer/#cmake-gui","title":"CMake GUI","text":""},{"location":"developer/#lsp-editor","title":"LSP + Editor?","text":""},{"location":"developer/#related-things","title":"Related Things","text":"<p>Please follow C++ Core Guidelines and write modern C++ code.</p> <p>Qt's documentation</p>"},{"location":"dictformats/","title":"Dictionary Formats","text":"<p>Popular dictionary formats are all supported.</p>"},{"location":"dictformats/#local-dictionaries-sources","title":"Local Dictionaries Sources","text":"<ul> <li>MDict dictionaries (.mdx/.mdd)</li> <li>StarDict dictionaries (.ifo/.dict./.idx/.syn)</li> <li>DSL dictionaries (ABBYY Lingvo source files .dsl(.dz))</li> <li>XDXF dictionaries (.xdxf(.dz))</li> <li>Zim dictionaries (.zim)</li> <li>Slob (Aard 2) dictionaries (.slob)</li> <li>DictD dictionaries (.index/.dict(.dz))</li> <li>Epwing dictionaries</li> <li>Aard Dictionary dictionaries, outdated predecessor of Slob (.aar)</li> <li>SDictionary dictionaries (.dct)</li> <li>Babylon glossary builder source files (.gls(.dz))</li> <li>Babylon dictionaries, complete support with images and resources (.BGL)</li> <li> <p>ABBYY Lingvo sound archives (.lsa/.dat)</p> </li> <li> <p>Sound files in separate folders. File names are used as word</p> </li> <li>Zipped sound pack. Sound files zipped, but with extension changed from .zip to (.zips)</li> </ul>"},{"location":"dictformats/#network-sources","title":"Network Sources","text":"<ul> <li>Wikipedia and Wiktionary</li> <li>DICT protocol</li> <li>LinguaLibre/Forvo pronunciations</li> <li>Any sites which allow set target word in the address line</li> </ul>"},{"location":"dictformats/#other-sources","title":"Other Sources","text":"<p>Various special \"dictionaries\" can be added, such as Programs, TTS, Morphology, Transliteration, etc... Their doc is located at Sources Management</p>"},{"location":"dictformats/#additional-info","title":"Additional info","text":""},{"location":"dictformats/#converting-between-formats","title":"Converting between formats","text":"<p>GoldenDict-ng does not provide any dictionary modification functionality.</p> <p>To convert between formats, try tools like pyglossary.</p>"},{"location":"dictformats/#custom-dictionary-icon","title":"Custom Dictionary Icon","text":"<p>Every local dictionary can have a custom icon. Supported formats are PNG, JPEG, GIF, SVG, WebP, ICO and BMP.</p> <p>For most dictionary formats, a dictionary's icon file should have the same basename as the main dictionary file and be placed beside the main dictionary file. For example:</p> <pre><code>.\n\u251c\u2500\u2500 My_best_dictionary.mdx &lt;- the main dictionary file\n\u2514\u2500\u2500 My_best_dictionary.svg &lt;- the icon\n</code></pre> <p>For XDXF, GD will prioritize to use <code>icon16.png</code>, <code>icon32.png</code> or <code>dict.bmp</code> in the dictionary folder as icon.</p> <p>For Epwing, the icon file should be placed beside the <code>catalogs</code> file and have the same name as the parent folder that contains <code>catalogs</code> file.</p>"},{"location":"dictformats/#stardict","title":"Stardict","text":"<p>Main file of Stardict dictionary (.dict) can be compressed by Dictzip program to reduce its size.</p> <p>Resource storage folder (images, style sheets, etc.) should be named as <code>res</code> beside other dictionary files.</p> <p>The <code>res</code> folder can be compressed into <code>res.zip</code> or <code>my_name.res.zip</code> (for main dict filename <code>my_name.ifo/dict</code>). This zip file should also be placed beside other dictionary files. The internal structure of the zip file should not have a top level folder.</p>"},{"location":"dictformats/#abbyy-lingvo-dsl","title":"ABBYY Lingvo (.dsl)","text":"<p>Main file of ABBYY Lingvo dictionary (.dsl) can be compressed by Dictzip program to reduce its size.</p> <p>Additional dictionary resources (images, sound files, etc.) also can be compressed into zip archive. This archive must be named on main dictionary file name (include extension) with adding \".files.zip\" and placed beside other dictionary files. If main file of your dictionary, for example, named \"My_best_dictionary.dsl\" therefore archive with resources must be named \"My_best_dictionary.dsl.files.zip\".</p> <p>GoldenDict supports the \"#SOUND_DICTIONARY\" directive. Sounds missing in the resources of the dictionary will be searched first in the dictionary specified in this directive.</p>"},{"location":"dictformats/#dictd-and-xdxf-compression","title":"DictD and XDXF compression","text":"<p>Main file of DictD dictionary (.dict) or XDXF dictionary (.xdxf) can be compressed into <code>*.dict.dz</code> or <code>*.xdxf.dz</code> by Dictzip program to reduce its size.</p>"},{"location":"dictformats/#slob","title":"Slob","text":"<p>GoldenDict can render TeX formulas when a slob dictionary bundles MathJax.</p>"},{"location":"dictformats/#gls","title":"GLS","text":"<p>Main file of Babylon source dictionary must be in UTF-8 (or UTF-16 with BOM) encoding. It can be compressed by Dictzip program to reduce its size. Golden Dict read from dictionary header \"### Glossary title:\", \"### Author:\", \"### Description:\", \"### Source language:\" and \"### Target language:\" fields only. Dictionary header must be concluded with \"### Glossary section:\" mark.</p>"},{"location":"dictformats/#abbyy-lingvo-sound-archives","title":"ABBYY Lingvo sound archives","text":"<p>ABBYY Lingvo sound archives are set of sound files packed into one file of some specific format. These files can be called directly from matches list or from dictionary articles.</p>"},{"location":"dictformats/#sound-files-in-separate-folders","title":"Sound files in separate folders","text":"<p>The separate folder with sound files can be added into GoldenDict dictionaries list. GoldenDict will handle this folders like ABBYY Lingvo sound archives (inapplicable in portable mode).</p>"},{"location":"dictformats/#zips-sound-packs","title":"Zips sound packs","text":"<p>Zips sound pack is zip archive with extension \".zips\" contains set of sound files. To create suck pack it needs to compress sound files into zip archive and change extension of this archive to \".zips\". GoldenDict will handle such sound packs like ABBYY Lingvo sound archives.</p>"},{"location":"dictformats/#general-notes","title":"General notes","text":"<p>At every launch GoldenDict scan folders with dictionaries to create dictionaries list. The more files in these folder is the more time for scanning. Therefore it is recommended to compress dictionary resources into zip archives and to use Zips sound packs instead of sound files in separate folders.</p>"},{"location":"faq/","title":"FAQs","text":""},{"location":"faq/#where-is-the-ffmpeg-audio-player","title":"Where is the ffmpeg audio player?","text":"<p>Since Qt6.5+, Qt uses ffmpeg as the default implementation of QMultimedia. So, the ffmpeg audio player option is not needed.</p> <p>If you still want to use ffmpeg audio player, you can configure <code>ffplay</code> as external program or build from source with CMake flag <code>-DWITH_FFMPEG_PLAYER=ON</code>.</p> <p></p>"},{"location":"feedbacks/","title":"Report Bugs & Feedbacks","text":""},{"location":"feedbacks/#bugs-reporting","title":"Bugs Reporting","text":"<p>Report any bugs and dysfunctions to issues</p> <p>If a certain dictionary leads to problems, you must attach the dict files or provide download links in bug reports.</p> <p>Attach your version info from the menu \"About\" \u2192 \"Copy version info\".</p>"},{"location":"feedbacks/#windows-tips","title":"Windows Tips","text":"<p>Gather crash dump and log files when reporting bugs.</p>"},{"location":"feedbacks/#crash-dump","title":"Crash Dump","text":"<p>If GD-ng crashes, upload the <code>.dmp</code> file in the <code>crash</code> folder, which is in the configuration folder.</p> <p></p>"},{"location":"feedbacks/#runtime-log-file","title":"Runtime Log File","text":"<p>To obtain the runtime log, enable Preferences \u2192 Advanced \u2192 \"Save debug messages to gd_log.txt in the config folder\".</p> <p>A <code>gd_log.txt</code> will be generated in the configuration folder in the next time you uses GD-ng.</p> <p>Alternatively, start GD-ng with command line flag <code>--log-to-file</code>.</p>"},{"location":"feedbacks/#macos-tips","title":"macOS Tips","text":"<p>macOS has a built-in crash reporter. Copy all the info from the bug report window.</p> <p>Try to start GD-ng from the command line and save the logs. Alternatively, enable the option of saving log to file as in Windows Tips.</p>"},{"location":"feedbacks/#linux-tips","title":"Linux Tips","text":"<p>If you have no clue, search and learn how to obtain coredumps using tools provided by your distro, and/or learn how to use a debugger. Now is the time.</p> <p>Noticeably, in recent years, popular distros support new technologies such as <code>systemd-coredump</code> and Debuginfod. Traditional approaches include installing debug packages or building from source.</p> <p>At least, you should start the program in the terminal and upload the log.</p>"},{"location":"install/","title":"Download & Install","text":""},{"location":"install/#download","title":"Download","text":"<p>GoldenDict-ng is available pre-built for Windows and macOS. It is available in a few Linux/Unix repos and FlatHub.</p> <ul> <li>Latest stable version</li> <li>Pre-release test builds.</li> </ul> <p>Because it is open source, you can always build it for yourself.</p>"},{"location":"install/#windows","title":"Windows","text":"<p>Choose either</p> <ul> <li><code>****-installer.exe</code> for traditional installer experience</li> <li><code>****-installer.7z</code> for simply unzip and run experience</li> </ul> <p>If Qt's version is not changed, you can also download a single <code>goldendict.exe</code> and drop it into previous installation's folder (If uncertain, don't do this).</p> <p>Requires Windows 10 (1809 or later) with MSVC runtime installed.</p>"},{"location":"install/#linux","title":"Linux","text":"<ul> <li>See the right side for available packages in various Linux distros.</li> <li>In Debian 12 and Ubuntu 23.04, <code>goldendict-webengine</code> is available (For later versions it is <code>goldendict-ng</code>).</li> <li>For ArchLinux, pre-built binary is available from archlinuxcn's repo.</li> </ul> <p>Minimum supported \"Linux\" version is supposedly the current Ubuntu LTS and Debian's oldstable.</p>"},{"location":"install/#macos","title":"macOS","text":"<p>Uses one of the <code>.dmg</code> installers in the Download.</p> <p>Requires at least macOS 13.</p>"},{"location":"install/#versioning-and-releasing","title":"Versioning and Releasing","text":"<p>This project uses Calendar Versioning: <code>YY.MM.Patch</code>.</p> <p>Releases will tentatively be done twice a year, considering factors like the major releases of Qt and the package freeze dates of Linux distros like Ubuntu.</p>"},{"location":"manage_groups/","title":"Groups","text":"<p>At <code>Edit</code> -&gt; <code>Dictioanries</code> -&gt; <code>Groups</code>, you can create and edit dictionary groups.</p> <p>To add a dictionary into a group, just drag it from the dictionary list into the group window on the right. To remove a dict, just drag it back to the dictionary list. Hold <code>Shift</code> to select a range of dictionaries or hold <code>Ctrl</code> to select multiple dictionaries.</p> <p>Additionally, multiple strategies of automatic grouping are provided:</p> <ul> <li>based on the language info embedded within dictionary files</li> <li>based on the folder structure</li> <li>based on customizable metadata files</li> </ul>"},{"location":"manage_groups/#auto-groups-by-dictionary-language","title":"Auto groups by dictionary language","text":"<p>For formats like DSL, which has embedded language from / to metadata, GD will use the dictionary's built-in metadata.</p> <p>For other formats, GD will try finding the last <code>{id}-{id}</code> pair delimited by non-alphabets in dictionary name or main file name to extract languages. The <code>{id}</code> is 2 or 3 letters ISO 639 codes. For example, if a dictionary named <code>some name en-zh</code>, it will be automatically grouped into <code>en-zh</code>.</p> <p>Groups created in this method also include a context menu when right-click the group name, in which you can do additional dictionaries grouping by source or target language and combine dictionaries in more large groups.</p>"},{"location":"manage_groups/#auto-groups-by-folders","title":"Auto groups by folders","text":"<p>Click the \"Group by folders\" will group your dicts based on folder structure.</p> <p>Two dictionaries will be in the same group if their container folder's direct parent is the same.</p> <p></p> <p>For example, the structure below will be auto grouped into two groups:</p> <ul> <li><code>English&lt;&gt;Chinese</code> with <code>Cambridge</code>, <code>Collins</code> and <code>Oxford</code></li> <li><code>English&lt;&gt;Russian</code> with <code>dictA</code>, <code>dictB</code>, <code>Wikipedia_ru</code> and <code>Wikipedia</code></li> </ul> <pre><code>.\n\u251c\u2500\u2500 English&lt;&gt;Chinese\n\u2502   \u251c\u2500\u2500 Cambridge\n\u2502   \u2502   \u251c\u2500\u2500 Cambridge.dict.dz\n\u2502   \u2502   \u251c\u2500\u2500 Cambridge.idx\n\u2502   \u2502   \u251c\u2500\u2500 Cambridge.info\n\u2502   \u2502   \u2514\u2500\u2500 Cambridge.syn\n\u2502   \u251c\u2500\u2500 Collins\n\u2502   \u2502   \u251c\u2500\u2500 Collins.dsl\n\u2502   \u2502   \u2514\u2500\u2500 res.zip\n\u2502   \u2514\u2500\u2500 Oxford\n\u2502       \u251c\u2500\u2500 Oxford.css\n\u2502       \u251c\u2500\u2500 Oxford.mdd\n\u2502       \u2514\u2500\u2500 Oxford.mdx\n\u2514\u2500\u2500 English&lt;&gt;Russian\n    \u251c\u2500\u2500 dsl\n    \u2502   \u251c\u2500\u2500 dictA.dsl\n    \u2502   \u2514\u2500\u2500 dictB.dsl\n    \u2514\u2500\u2500 zim\n        \u251c\u2500\u2500 Wikipedia_ru.slob\n        \u2514\u2500\u2500 Wikipedia.zim\n</code></pre> <p>Note that if two groups share the same name but in different folder, then upper level's folder name will be prepended with group name. The Example below will be grouped into <code>epistularum/Japanese</code> and <code>Mastameta/Japanese</code>.</p> <p>More levels of folder nesting are not supported.</p> <pre><code>.\n\u251c\u2500epistularum\n\u2502   \u2514\u2500Japanese   &lt;- Group\n\u2502       \u2514\u2500DictA  &lt;- Dict Files's container folder\n|          \u2514\u2500 DictA Files\n\u251c\u2500Mastameta\n\u2502   \u2514\u2500Japanese   &lt;- Group\n|       \u2514\u2500DictB  &lt;- Dict Files's container folder\n|          \u2514\u2500 DictB Files\n</code></pre>"},{"location":"manage_groups/#auto-groups-by-metadatatoml","title":"Auto groups by <code>metadata.toml</code>","text":"<p>Click the \"group by metadata\" will group your dicts based on <code>metadata.toml</code>.</p> <p>The <code>metadata.toml</code> should be placed beside dictionary files. One <code>metadata.toml</code> for each dictionary.</p> <p>The metadata file uses TOML format.</p> <pre><code>categories = [ \"English\", \"Russian\", \"Chinese\" ]\n\n# the following `langfrom` , `langto` fields have not been supported yet.\n[metadata]\nname = \"New Name\"\nlangfrom = \"English\"\nlangto = \"Russian\"\n</code></pre> <p>For example,</p> <pre><code>.\n\u251c\u2500\u2500 Cambridge\n\u2502    \u251c\u2500\u2500 metadata.toml     (A)\n\u2502    \u251c\u2500\u2500 Cambridge.idx\n\u2502    \u251c\u2500\u2500 Cambridge.info\n\u2502    \u251c\u2500\u2500 Cambridge.syn\n\u2502    \u2514\u2500\u2500 Cambridge.dict.dz\n\u2514\u2500\u2500 Collins\n     \u251c\u2500\u2500 metadata.toml\n     \u251c\u2500\u2500 res.zip\n     \u2514\u2500\u2500 Collins.dsl       (B)\n</code></pre> <p>The content of the metadata <code>(A)</code> is <pre><code>categories = [\"en-zh\", \"\u6c49\u82f1\u8bcd\u5178\"]\n</code></pre></p> <p>The content of the metadata <code>(B)</code> is <pre><code>categories = [\"\u56fe\u7247\u8bcd\u5178\", \"en-zh\", \"\u6c49\u82f1\u8bcd\u5178\"]\n</code></pre></p> <p>The structure above will be auto grouped into three groups:</p> <ul> <li><code>en-zh</code> with <code>Cambridge</code>, <code>Collins</code></li> <li><code>\u56fe\u7247\u8bcd\u5178</code> with <code>Collins</code></li> <li><code>\u6c49\u82f1\u8bcd\u5178</code> with <code>Cambridge</code>,<code>Collins</code></li> </ul> <p>Note: Dictionaries without <code>metadata.toml</code> won't be auto-grouped.</p>"},{"location":"manage_sources/","title":"Sources","text":"<p>Dictionary management dialog can be opened via menu <code>Edit</code> -&gt; <code>Dictionaries</code>.</p> <p>To use local dictionaries, add them via <code>Sources</code> -&gt; <code>Files</code>.</p> <p>To inspect or disable individual dictionaries, go <code>Edit</code> -&gt; <code>Dictionaries</code> -&gt; <code>Dictionaries</code>.</p> <p>If you have too many dictionaries, consider using <code>Groups</code> to manage them.</p>"},{"location":"manage_sources/#files","title":"Files","text":"<p>Here you can add local dictionaries.</p> <p>Press the \"Add\" button and select folders that include your local dictionaries. To search every subfolder, enable the \"Recursive\":</p> <p>GoldenDict will scan these folders and add found dictionaries to the dictionaries list.</p> <p>The \"Rescan\" button starts a forced scan of all folders in the list.</p>"},{"location":"manage_sources/#sound-dirs","title":"Sound Dirs","text":"<p>Similar to Files, you can either add a folder which contains sound files or a <code>.zip</code> archive which contains the sound files.</p> <p>GD will search through the sound file names when querying words.</p>"},{"location":"manage_sources/#morphology","title":"Morphology","text":"<p>A word could have several forms, but sometimes a dictionary only contains one form that could not be found unless you search the normalized form.</p> <p>Morphology dictionary uses Hunspell's morphological analysis to obtain word's variant forms.</p> <p>You can specify a path that includes Hunspell format data files (<code>.aff</code> + <code>.dic</code>). GoldenDict will scan this folder and create a list of available dictionaries.</p> <p>One possible source of Hunspell dictionaries is LibreOffice's dictionaries.</p> <p>The detailed document about the affix file (<code>.aff</code>) and the dict file (<code>.dic</code>) can be found at hunspell.5.</p> <p>Note that lots of Hunspell's dictionaries are for mostly for spell checking, and they may lack special morphological rules (For example, related words don't share the same stem in <code>.dic</code> file). There are some specially tailored hunspell dicts to use for Morphology. Such as</p> <ul> <li>https://sourceforge.net/projects/goldendict/files/better%20morphologies/1.0/</li> <li>https://github.com/Ajatt-Tools/hunspell-ja</li> </ul>"},{"location":"manage_sources/#websites","title":"Websites","text":"<p>Here you can add any website that allows you to specify the query word in the URL. To add a site, provide its URL using one of the placeholders below, give it a name for the dictionary list, and check the \"Enabled\" column. You can also set a custom icon in the \"Icon\" column.If you add an icon file name without a path, GoldenDict will search for this file in the configuration folder.</p> <p>The query word can be inserted into the URL using the following placeholders:</p> Target word template Encoding %GDWORD% UTF-8"},{"location":"manage_sources/#dict-servers","title":"DICT servers","text":"<p>Here you can add servers which use the DICT protocol. To add such a server, you should set its URL, name for the dictionaries list, server bases list, search strategies list, and set a mark in the \"Enabled\" column. If the bases list is empty, GoldenDict will use all server bases. If the search strategies list is empty, GoldenDict will use the \"prefix\" strategy (comparing the first part of the word).</p> <p>In the \"Icon\" column you can set custom icon for every server. If you add icon file name without path GoldenDict will search this file in configuration folder.</p>"},{"location":"manage_sources/#programs","title":"Programs","text":"<p>Here you can add external applications. To add such an application, you should set the command line for its launch, name for the dictionary list and application type.</p> <p>The <code>%GDWORD%</code> in command line will be replaced by word from search line.</p> Program type Purpose Audio Play sound. Text Text printed by the program will be shown as separate article. HTML HTML printed by the program will be shown as separate article. Prefix match A list of words printed by the program will be added to search bar's completion list. <p>Other than \"Audio\", the program should print the content to standard output.</p> <p>In the \"Icon\" column, you can set a custom icon for every application. If you add icon file name without a path, GoldenDict will search this file in the configuration folder.</p> <p>Note</p> <p>The word will be written to <code>stdin</code> in UTF-8 if the command line doesn't contain <code>%GDWORD%</code>.</p> <p>In rare situations on Windows, some programs may not read <code>stdin</code> as UTF-8. In this case, you need to do some adjustments.</p> <p>For Python3.6+, reading <code>stdin</code> as UTF-8 is the default behaviour. For older versions, you may need to change PYTHONIOENCODING.</p> <p>For Node.js, try <code>process.stdin.setEncoding('utf8');</code>.</p> <p>If you cannot change how your language handles stdin's encoding, try store the data read from the <code>stdin</code> as bytes and call related methods that interpret bytes as UTF-8 strings.</p> <p>If you cannot access the source code, try enable \"Beta: Use Unicode UTF-8 for worldwide language support.\" in Windows settings.</p>"},{"location":"manage_sources/#transliteration","title":"Transliteration","text":"<p>Here you can add transliteration algorithms. To add an algorithm to the dictionaries list, just set a mark beside it. When such a dictionary is added to the current dictionaries group, GoldenDict will search for the word in the input line as well as the result of its handling by the corresponding transliteration algorithm.</p>"},{"location":"manage_sources/#system-text-to-speech-engines","title":"System Text-to-speech engines","text":"<p>Its capability is provided via Qt Speech.</p> <p>On Windows &amp; macOS, the system provides sounds.</p> <p>On Linux, speech-dispatcher and flite are the backends.</p>"},{"location":"topic_anki/","title":"Anki Integration","text":""},{"location":"topic_anki/#prerequisite","title":"Prerequisite","text":"<ol> <li>Install Anki:</li> <li>Install ankiconnect:</li> </ol>"},{"location":"topic_anki/#configure-anki","title":"Configure Anki","text":""},{"location":"topic_anki/#create-a-new-model-or-use-an-existing-model","title":"Create a new model, or use an existing model","text":"<p>For example, the model could have <code>Front</code> and <code>Back</code> fields.</p> <p></p>"},{"location":"topic_anki/#configure-the-template","title":"Configure the template","text":"<p>The front template</p> <p> The back template</p> <p></p>"},{"location":"topic_anki/#configure-goldendict","title":"Configure Goldendict","text":""},{"location":"topic_anki/#through-toolbarpreferencenetwork","title":"Through toolbar=&gt;preference=&gt;network","text":"<ul> <li>Word - Vocabulary headword.</li> <li>Text - Selected definition.</li> <li>Sentence - Search string. You can leave it blank.</li> </ul> <p>Example for adding Japanese sentences: </p>"},{"location":"topic_anki/#action","title":"Action","text":""},{"location":"topic_anki/#result","title":"Result","text":"<p>Word and definition: </p> <p>Sentence, word, and definition: </p>"},{"location":"topic_anki/#using-uri-schemes","title":"Using URI schemes","text":"<p>The <code>goldendict://word</code> link can be used to query a word directly on GoldenDict-ng.</p> <p>On your Anki card's template, you can add the code below to have a \"1 click open in GoldenDict-ng\" card.</p> <pre><code>&lt;a href=\"goldendict://{{Front}}\"&gt;{{Front}}&lt;/a&gt;\n</code></pre>"},{"location":"topic_flatpak/","title":"Flatpak/FlatHub","text":"<p>Flatpak is a software platform that runs on top of Linux. It has idiosyncrasies by design.</p> <p>This page provides some solutions to work with flatpak. Exactly how to use Flatpak needs to refer Flatpak's documentation</p> <p>These solutions use Flatseal, but directly using the <code>flatpak</code> command or KDE's flatpak-kcm works as well.</p> <p>Note</p> <p>Feel free to add new solutions by clicking the edit button on the top right.</p>"},{"location":"topic_flatpak/#add-external-programs","title":"Add external programs","text":"<p>Problem: Apps inside Flatpak cannot run programs on the host system directly.</p> <p>Solution: Use <code>flatpak-spawn --host</code>.</p> <p>First, add <code>org.freedesktop.Flatpak</code> to allowed session bus.</p> <p></p> <p>Then add application like <code>flatpak-spawn --host --directory=${the external program's pwd will be set to this value} ${The actual commands}</code>.</p> <p>For example, Translate Shell can be added to GoldenDict as <code>flatpak-spawn --host --directory=. trans -no-ansi %GDWORD%</code>.</p>"},{"location":"topic_flatpak/#uses-fixed-paths-instead-of-runuser1000doc","title":"Uses fixed paths instead of <code>/run/user/1000/doc/...</code>","text":"<p>Apps inside Flatpak don't have direct access to filesystem by default. A directory selected in file chooser will be exported to app as <code>/run/user/1000/doc/...</code>. The exported directories can be listed with <code>flatpak documents --columns=id,origin,application</code></p> <p>If you want to use fixed paths instead, just grant GolenDict either the whole file system, the whole home or a specific path.</p> <p>Note that some special paths in the host system like <code>\\tmp</code> cannot be accessed by flatpak apps in any way.</p> <p></p>"},{"location":"topic_move_index_folder/","title":"Move index folder","text":"<p>To move the index folder to other places:</p>"},{"location":"topic_move_index_folder/#windows","title":"Windows","text":"<p>Note</p> <p>the <code>mklink</code> is built-in tool in Windows.</p> <ol> <li>Open <code>cmd</code> as administrator:</li> <li>Copy the index folder to another place, take <code>D:\\gd-ng\\index_new</code> for example.:</li> <li>Run <code>mklink /D \"C:\\Users\\USERNAME\\Application Data\\GoldenDict\\index\" \"D:\\gd-ng\\index_new\"</code>:</li> <li>Run GoldenDict:</li> </ol>"},{"location":"topic_move_index_folder/#linuxmacos","title":"Linux/macOS","text":"<p>Use the <code>ln</code> command.</p>"},{"location":"topic_portablemode/","title":"Portable Mode","text":"<p>By default, GoldenDict saves program configurations and indexes in the user's home directory. To save them in a single portable location, you can to create a <code>portable</code> folder next to the main program file. Once this folder exists, GoldenDict will launch in portable mode.</p> <p>In portable mode, the configurations and indexes are stored in the <code>portable</code> folder. All dictionaries must be placed in or inside the subfolders of <code>content</code> folder, which located besides the main program file.</p> <p>Folder structure: <pre><code>.\n\u251c\u2500\u2500 goldendict.exe\n\u251c\u2500\u2500 portable/\n\u251c\u2500\u2500 content/\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"topic_transliteration/","title":"Custom Transliteration","text":"<p>This will enable users to configure their own transliteration if the provided transliteration can not meet the requirements.</p> <p></p> <p>This is the result after configured <code>ae;\u00e6</code></p> <p></p>"},{"location":"topic_userstyle/","title":"Custom Stylesheet & JavaScript","text":"<p>By creating <code>article-style.css</code> or <code>article-script.js</code> in GoldenDict's configuration folder (beside the <code>config</code> file), you can change dictionaries' presentation or inject javascript to dictionaries.</p> <pre><code>.    &lt;- GD's configuration folder\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 article-style.css\n\u251c\u2500\u2500 article-style-print.css (affecting styles when printing)\n\u251c\u2500\u2500 article-script.js\n\u2514\u2500\u2500 qt-style.css\n</code></pre> <p>The <code>article-style.css</code> is just standard HTML Style Sheets. To know class or id names used in article, you can open inspector by right click article's body and click <code>Inspect (F12)</code>. The inspector's documentation can be found at Chrome DevTools</p> <p>Also, you can tune GoldenDict's interface by creating <code>qt-style.css</code> style sheet file in GoldenDict configuration folder. It is a Qt Style Sheet loaded during startup.</p> <p>Samples of <code>article-style.css</code> and <code>qt-style.css</code> files can found in GoldenDict's source code at /src/stylesheets</p>"},{"location":"topic_userstyle/#addon-styles","title":"\"Addon\" Styles","text":"<p>Under GoldenDict's configuration folder, you can create a \"styles\" folder for \"Addon\" styles, so that you can switch between multiple <code>article-style.css</code> and <code>qt-style.css</code>.</p> <p>Folder structure like below will create two \u201caddon\u201d styles to switch in settings -&gt; appearances.</p> <pre><code>.    &lt;- GD's configuration folder\n\u251c\u2500\u2500 config\n\u2514\u2500\u2500 styles\n    \u251c\u2500\u2500 dark\n    \u2502   \u251c\u2500\u2500 article-style.css\n    \u2502   \u2514\u2500\u2500 qt-style.css\n    \u2514\u2500\u2500 light\n        \u251c\u2500\u2500 article-style.css\n        \u2514\u2500\u2500 qt-style.css\n</code></pre>"},{"location":"topic_wayland/","title":"Wayland","text":"<p>Environment variable <code>GOLDENDICT_FORCE_WAYLAND</code> can be used to force GD to run in Wayland mode, like <code>env GOLDENDICT_FORCE_WAYLAND=1 goldendict</code>.</p> <p>Don't use unless you know!</p> <p>This flag only guarantees GD to run in wayland mode and won't crash, but nothing more.</p> <p>Enable this will break popup, global hotkeys and probably other things.</p>"},{"location":"topic_wayland/#current-reality","title":"Current reality","text":"<p>Help wanted</p> <p>Need help to redesign popup for wayland.</p> <p>Popup is implemented with <code>querying mouse cursor's position</code> and <code>setting a window's absolute global position</code>. Wayland does not support both by design and philosophy.</p> <p>Wayland does not support registering global hotkeys until very recently, but a reasonable wayland desktop environment should provide some way to bind keys to commands globally.</p>"},{"location":"topic_website_scripting/","title":"Website Scripting","text":"<p>GoldenDict allows you to inject custom JavaScript code into websites opened in separate tabs. This feature is useful for customizing the appearance or behavior of websites, fixing display issues, or adding additional functionality.</p>"},{"location":"topic_website_scripting/#how-to-use-website-scripting","title":"How to Use Website Scripting","text":"<ol> <li>Open the Edit | Dictionaries dialog:</li> <li>Go to the Websites tab:</li> <li>Add or edit a website entry:</li> <li>In the Script column, you can specify either:<ul> <li>A file path (relative to the config directory or absolute)</li> <li>Direct JavaScript code</li> </ul> </li> </ol>"},{"location":"topic_website_scripting/#script-column-details","title":"Script Column Details","text":"<p>The Script column in the Websites configuration accepts two types of input:</p> <ol> <li> <p>File Path:</p> <ul> <li>Relative path: Path relative to the GoldenDict configuration directory</li> <li>Absolute path: Full path to a JavaScript file on your system</li> </ul> </li> <li> <p>Direct Script Content:</p> <ul> <li>JavaScript code directly entered in the field</li> </ul> </li> </ol> <p>When you specify a file path, GoldenDict will read the content of that file and inject it as JavaScript into the matching website. If the file doesn't exist or you've entered JavaScript code directly, GoldenDict will inject the content of the field directly as JavaScript.</p>"},{"location":"topic_website_scripting/#configuration-directory","title":"Configuration Directory","text":"<p>The configuration directory location depends on your operating system:</p> <ul> <li>Windows: <code>%APPDATA%\\GoldenDict\\</code></li> <li>Linux: <code>~/.goldendict/</code> or <code>~/.config/goldendict/</code> (depending on installation)</li> <li>macOS: <code>~/Library/Preferences/GoldenDict/</code></li> </ul> <p>You can also check the menu \"Help-&gt;Configuration folder\" to see the exact configuration directory path.</p>"},{"location":"topic_website_scripting/#example-usage","title":"Example Usage","text":""},{"location":"topic_website_scripting/#using-a-file","title":"Using a File","text":"<ol> <li>Create a JavaScript file, for example <code>mywebsite.js</code> in your config directory:</li> <li>Add your JavaScript code to this file:    <pre><code>// Example: Hide a specific element\ndocument.addEventListener('DOMContentLoaded', function() {\n    var element = document.getElementById('annoying-banner');\n    if (element) {\n        element.style.display = 'none';\n    }\n});\n</code></pre></li> <li>In the Script column, enter: <code>mywebsite.js</code>:</li> </ol>"},{"location":"topic_website_scripting/#using-direct-script-content","title":"Using Direct Script Content","text":"<p>Enter JavaScript code directly in the Script column: <pre><code>document.addEventListener('DOMContentLoaded', function() {\n    document.body.style.backgroundColor = '#f0f0f0';\n});\n</code></pre></p>"},{"location":"topic_website_scripting/#important-notes","title":"Important Notes","text":"<ul> <li>Scripts are only executed when websites are opened in separate tabs, not in the main window</li> <li>The script is injected after the page loads, so use <code>DOMContentLoaded</code> event for DOM manipulations</li> <li>Be careful with the scripts you inject, as they have the same permissions as the website itself</li> <li>If using file paths, make sure the files exist and are readable by GoldenDict</li> </ul>"},{"location":"ui_audioengine/","title":"External Audio Engine","text":"<p>To configure external audio player: Preference \u2192 Audio \u2192 <code>Use external program</code>.</p> <p></p> <p>vlc: <pre><code>vlc --intf dummy --play-and-exit\n</code></pre></p> <p>ffplay: <pre><code>ffplay -autoexit -nodisp\n</code></pre></p> <p>mpv: <pre><code>mpv --no-video --no-audio-display\n</code></pre></p> <p>or other audio player.</p>"},{"location":"ui_favorites/","title":"Favorites","text":"<p>Favorites is a hierarchical structure of folders and words in them. You could create folders manually via context menu.</p> <p>By default, the \u2b50 icon on the toolbar will indiciate if word is in top most level.</p> <p>You can \"activate\" a folder via context menu. Then the \u2b50 icon will indiciate if a word is in this folder and clicking the \u2b50 icon will add/remove words to/from this folder.</p> <p>A group can have a associated folder. When switching groups, the associated folder will be automatically activated. For simple use cases, just use the name of an existing folder. If a folder is nested, then use <code>/</code> as a separator, such as <code>english/food/spicy</code> or <code>spanish/greetings</code>.</p> <p>The entries can be moved simply by dragging and dropping. The entries can be deleted via context menu or by pressing the \"Delete\" key.</p>"},{"location":"ui_favorites/#import-export","title":"Import &amp; Export","text":"<p>In addition to adding and removing items to/from the Favorites you can perform the following operations via context menu or the main menu:</p> <ul> <li>\"Export\" - Export the all favoriates to a plain text or XML file.</li> <li>\"Import\" - The current favorites will be replaced by the content of XML or plain text.</li> </ul> <p>Info</p> <p>Currently, XML will perserve folder structure but plain text won't!</p>"},{"location":"ui_fulltextsearch/","title":"Full Text Search","text":"<p>The full-text search dialog can be opened via menu \"Search\" or \"Ctrl+Shift+F\".</p> <p>Full-text search allow to search words or sentences not in dictionary headwords but in articles text of dictionaries from current dictionaries group.</p> <p></p> <p>Type the desired word in \"Search line\" to search.</p> <p>Search modes</p> <ul> <li>\"Default\" \u2014 This follows the xapian search syntax. </li> <li>\"Wildcards\" - xpaian \"wildcard\" mode, which means it only supports the prefix wildcards like \"hell*\"(in English alike language).As CJK use NGRAM term generator,the <code>*</code> should be treated as a seperator while not quoted.</li> </ul> <p>\"Available dictionaries in group\" - here you can view how many dictionaries in the current group are suitable for full-text search, how many dictionaries already indexed and how many dictionaries wait for indexing.</p> <p>When you place mouse cursor over headword in results list, the tooltip with dictionary list contains such articles matched the search conditions will be shown.</p> <p>Note</p> <p>The dictionary will index for full-text search in background and started immediately after program start, name of the currently indexing dictionary is displayed in the status line. This process can take a long time and require many computing resources.You may turn off indexing for huge dictionaries like Wikipedias or Wiktionaries in preferences. To find dictionary which can't be indexed check GoldenDict with <code>--log-to-file</code> or check <code>stdout</code>.</p>"},{"location":"ui_headwords/","title":"Headwords Dialog","text":"<p>View the unique headwords list for local dictionary.</p> <p></p> <p>The headwords dialog can be opened via:</p> <ul> <li>context menu of dictionaries list</li> <li>context menu of icon on dictionaries bar in GoldenDict toolbar</li> <li>context menu of dictionaries list in navigation pane</li> </ul> <p>The filter line allow to filter dictionaries list to remain only necessary headwords. Such filtration can be completed in next modes:</p> Mode Filtration type Plain text Headword contains string from filter line. Wildcards Headword matched to Unix-like template from filter line. Such template can contain wildcard symbols <code>?</code> (matches any one character), <code>*</code> (matches any characters number) or ranges of characters <code>[...]</code> To find characters <code>?</code>, <code>*</code>, <code>[</code> and <code>]</code> it should be escaped by backslash - <code>\\?</code>, <code>\\*</code>, <code>\\[</code>, <code>\\]</code>. RegExp Headword matched to regular expression from filter line. <p>If option \"Auto apply\" is turned on any changes in filter line will be applied to headwords list immediately. Otherwise you should press \"Apply\" button to apply changes. If dictionary contains more than 150000 headwords the \"Auto apply\" option is disabled.</p> <p>If option \"Match case\" is turned on the matches search will be completed in the case-sensitive mode, otherwise in case-insensitive mode.</p> <p>The \"Export\" button allow to export the filtered headwords list to text file.</p> <p>Press \"Ctrl+N\" shortcut if you want to switch focus to main GoldenDict window. Press \"Ctrl+D\" to switch focus from main window to headwords dialog.</p>"},{"location":"ui_popup/","title":"Popup Window","text":"<p>Popup is a mini window for rapid translation.</p> <p>Enable it by clicking the \ud83d\udca1 (enable clipboard trakcing) on the toolbar or using the context menu of the tray icon.</p> <p>A popup window will show up when copying text.</p>"},{"location":"ui_popup/#linux","title":"Linux","text":"<p>On linux/X11, the text selection can also trigger a popup window. You have to enable it in preferences.</p>"},{"location":"ui_popup/#ocr","title":"OCR","text":"<p>See How to use GoldenDict with OCR.</p>"},{"location":"ui_shortcuts/","title":"Shortcuts","text":"Shortcut Action Alt+Left, Backspace (In main and popup windows) history navigation: show previous founded results Alt+Right (In main and popup windows) history navigation: show next founded results Alt+Down Jump to article from next dictionary Alt+Up Jump to article from previous dictionary Alt+Enter, Ctrl+Enter (Search line) Show translation in new tab Alt+D, Ctrl+L (In main and popup windows) go to search line Alt+G (In main and popup windows) choose dictionaries group from group list Alt+S (In main and popup windows) playback pronunciation for current word Alt+W (In popup window) transfer word from search line to main window Alt+PgDown (In main and popup windows) switch to next dictionaries group Alt+PgUp (In main and popup windows) switch to previous dictionaries group Ctrl++ Increase articles font size Ctrl+\u2013 Decrease articles font size Ctrl+0 Set default articles font size Ctrl+MouseWheel Increase/decrease articles font size Ctrl+A Select all articles in current page Ctrl+C Copy selected Ctrl+D Switch to dictionary headwords dialog (if it is open) Ctrl+E Add current tab to Favorites Ctrl+F4 (Main window) minimize to system tray Ctrl+F5 Rescan dictionaries Ctrl+F (In main and popup windows) search in page / (In dictionaries dialog) go to filter line Ctrl+H Show/hide history pane Ctrl+I Show/hide Favorites pane Ctrl+M Show/hide main menu Ctrl+N (In dictionary headwords dialog and full-text search dialog) switch to main window Ctrl+O Above all windows Ctrl+P (In main window) print current article Ctrl+Q (In main window) close GoldenDict Ctrl+R Show/hide results pane Ctrl+S Show/hide search pane Ctrl+T (In main window) create new tab Ctrl+W (In main window) close current tab Ctrl+PgDown (In main window) switch to next tab Ctrl+PgUp (In main window) switch to previous tab Ctrl+Tab (In main window) switch to next tab (can be changed in preferences) Ctrl+Shift+A Select current article only Ctrl+Shift+C Copy selected as text Ctrl+Shift+F Open/switch to full-text search dialog Ctrl+Shift+W Close all tabs Ctrl+Shift+S Stop current playing sound Del (History) delete select line Enter (In main window) go to search line Esc (In main window) go to search line (the action for Esc key can be changed in preferences) / (in popup window) close popup window F1 GoldenDict reference F2 (In main window) save current page to html F3 Dictionaries dialog F4 GoldenDict preferences F11 Open configuration folder F12 Inspector"},{"location":"ui_toolbar/","title":"Tool & Dictionary Bar","text":""},{"location":"ui_toolbar/#toolbar","title":"Toolbar","text":"<p>Type your word in Search Box and press <code>Enter</code> to search word in the current selected group. You can also choose a variant from a matches list.</p> <p>Holding Ctrl or Shift will display the translation result in a new tab.</p>"},{"location":"ui_toolbar/#wildcard-matching","title":"Wildcard matching","text":"<p>The search line can use wildcard or glob symbols for matching words.</p> Wildcard Description <code>?</code> Matches any single character. <code>*</code> Matches zero or more of any characters. <code>[abc]</code> Matches one character given in the bracket. <code>[a-c]</code> Matches one character from the range given in the bracket. <code>[!abc]</code> Matches one character that is not given in the bracket. <code>[!a-c]</code> Matches one character that is not from the range given in the bracket. <code>\\</code> Escaping wildcard symbols, e.g. <code>\\?</code> to search <code>?</code> <p>Note</p> <p>The wildcard symbol in the first character leads to scanning of every dictionary's every word and may take a long time.</p> <p>More information about wildcard matching can be found in Wikipedia's glob article.</p>"},{"location":"ui_toolbar/#dictionary-bar","title":"Dictionary Bar","text":"<p>The dictionary bar shows dictionaries from the current group.</p> <p>Click the icons to select/unselect them.</p>"},{"location":"ui_toolbar/#single-selection","title":"Single Selection","text":"<p>Ctrl+Click will focus on a single dictionary.</p> <p>If a dictionary is the only one selected, clicking it with Ctrl will reselect all dictionaries.</p>"},{"location":"ui_toolbar/#temporary-selection","title":"Temporary Selection","text":"<p>Temporarily capture the selection and restore it later.</p> <ul> <li>Capture Selection \u2190 Shift+Click any dictionary icons.</li> <li>Restore Selection \u2190 Click the \"Restore selection\" in the right click context menu</li> </ul> <p>Note</p> <p>the \"Found in dictionaries\" panel can also use the above two special operations.</p>"},{"location":"howto/build_from_source/","title":"Build from source","text":"<p>The <code>Release-*</code> and <code>PR-check-*</code> workflow files under <code>.github</code> in the source code has actual build and commands for reference.</p>"},{"location":"howto/build_from_source/#dependencies","title":"Dependencies","text":"<ul> <li>C++17 compiler (For windows it must be MSVC)</li> <li>Latest QT6</li> </ul> <p>For debian/ubuntu, those packages are needed</p> <pre><code>libavformat-dev libavutil-dev libbz2-dev libeb16-dev libhunspell-dev \\\nliblzma-dev liblzo2-dev libopencc-dev libvorbis-dev \\\nlibx11-dev libxtst-dev libzim-dev libzstd-dev qt6-5compat-dev \\\nqt6-base-dev qt6-multimedia-dev qt6-speech-dev qt6-svg-dev \\\nqt6-tools-dev qt6-tools-dev-tools qt6-webchannel-dev \\\nqt6-webengine-dev x11proto-record-dev zlib1g-dev\n</code></pre> <p>In other words, those libraries</p> <ul> <li>ffmpeg</li> <li>libzim</li> <li>xapian</li> <li>hunspell</li> <li>opencc</li> <li>libeb</li> <li>libvorbis</li> <li>x11 (linux only)</li> </ul> <p>And a few compression libraries:</p> <ul> <li>xz (lzma)</li> <li>bzip2</li> <li>lzo2</li> <li>zlib</li> </ul>"},{"location":"howto/build_from_source/#build","title":"Build","text":"<p>Basically, you need those commands:</p> <pre><code>cd goldendict-ng &amp;&amp; mkdir build_dir\n# config step\ncmake -S . -B build_dir\n      -G \"Ninja\"/\"Unix Makefiles\"/\"Xcode\"...  (Optional)\n      --install-prefix=/usr/local/            (Optional)\n      -DCMAKE_BUILD_TYPE=Release              (Optional)\n\n# actual build\ncmake --build build_dir\n      --parallel 7  (Optional if Ninja was chosen)\n\ncmake --install ./build_dir/\n</code></pre>"},{"location":"howto/build_from_source/#feature-flags","title":"Feature flags","text":"<p>Append <code>-D{flag_names}=ON/OFF</code> to cmake's config step.</p> <p>Available flags can be found on the top of <code>CMakeLists.txt</code></p>"},{"location":"howto/build_from_source/#windows","title":"Windows","text":"<p>Install Qt6 (MSVC) through Qt Online Installer and add Qt's path to CMake</p> <pre><code>-DCMAKE_PREFIX_PATH=F:\\Qt\\6.4.1\\msvc2019_64\n</code></pre>"},{"location":"howto/build_from_source/#make-the-exe-runable","title":"Make the <code>.exe</code> runable","text":"<p>Call <code>cmake --install {the cmake output folder}</code> will copy all necessary dependencies to correct locations.</p> <p>TODO: (untested) you can also <code>${Qt's install path}\\Qt\\6.5.2\\msvc2019_64\\bin</code> and vcpkg's bin paths to your PATH environment variable</p> <p>Note that using <code>-G Ninja</code> in CMake is assumed to be used. TODO: MSBuild has minor bugs for being \"Multi-Config\".</p>"},{"location":"howto/build_from_source/#vcpkg","title":"Vcpkg","text":"<p>vcpkg is the primary method to build GoldenDict-ng's dependencies.</p> <p>There are a few ways to use it.</p> <p>First, just do nothing. Without any additional CMake config options, a pre-built cached version of vcpkg will be automatically obtained and setup.</p> <p>Second, install vcpkg on your local machine, then set <code>CMAKE_TOOLCHAIN_FILE</code> as described here, which says append <code>-DCMAKE_TOOLCHAIN_FILE={Your vcpkg install location}/scripts/buildsystems/vcpkg.cmake</code> to CMake's config step. Note that this costs a long time to build.</p>"},{"location":"howto/build_from_source/#macos","title":"macOS","text":"<p>If you build in an IDE, then the created <code>GoldenDict.app</code>  will be runnable from the IDE which set up necessary magics for you.</p> <p>To make the <code>.app</code> runnable elsewhere, you can run <code>cmake --install build_dir/</code> which will invoke macdeployqt, ad-hoc code signing and various other things. The produced app will end up in <code>build_dir/redist/goldendict-ng.app</code></p> <p>To create <code>.dmg</code> installer, you have to have create-dmg installed on your machine, then also <code>cmake --install build_dir/</code>.</p>"},{"location":"howto/how%20to%20add%20a%20program%20as%20dictionary/","title":"External Programs as Dict","text":""},{"location":"howto/how%20to%20add%20a%20program%20as%20dictionary/#add-external-programs-or-scripts","title":"Add external programs or scripts","text":"<p>GoldenDict can use programs or scripts as dictionary.</p>"},{"location":"howto/how%20to%20add%20a%20program%20as%20dictionary/#an-example","title":"An example","text":"<p>Tokenize the input german sentence into words.</p>"},{"location":"howto/how%20to%20add%20a%20program%20as%20dictionary/#install-python-and-somajo","title":"Install Python and SoMaJo.","text":"<p>You can follow the instructions in the documentation https://github.com/tsproisl/SoMaJo?tab=readme-ov-file#installation</p> <pre><code>pip install -U SoMaJo\n</code></pre>"},{"location":"howto/how%20to%20add%20a%20program%20as%20dictionary/#create-a-script","title":"Create a script","text":"<pre><code>from somajo import SoMaJo\nimport sys\n\ntokenizer = SoMaJo(\"de_CMC\", split_camel_case=True)\n\n# note that paragraphs are allowed to contain newlines\nparagraphs = [sys.argv[1]]\nsentences = tokenizer.tokenize_text(paragraphs)\nfor sentence in sentences:\n    for token in sentence:\n        if token.token_class=='regular':\n            print(f\"{token.text}\")\n</code></pre> <p>and save the script in the <code>E:\\test.py</code> for example.</p>"},{"location":"howto/how%20to%20add%20a%20program%20as%20dictionary/#add-the-script-to-the-program-dictionary","title":"Add the script to the program dictionary","text":"<p> <code>python e:\\test.py %GDWORD%</code></p>"},{"location":"howto/how%20to%20add%20a%20program%20as%20dictionary/#the-result","title":"The result","text":""},{"location":"howto/how%20to%20customize%20the%20opencc/","title":"Customize the opencc","text":"<p>Under the opencc folder, these are the opencc configuration files.</p> <p>the following three files are currently used in GoldenDict. <pre><code>s2tw.json\ns2hk.json\nt2s.json\n</code></pre> - How to specify other configuration files?</p> <ol> <li>Create a custom file, such as custom.txt:    </li> <li>Modify the *.json file, add the new custom.txt to the configuration:    </li> <li>Search <code>\u4e11</code> in GoldenDict-ng will also show the result of <code>\u7f8e</code>:</li> </ol> <p>any other valid opencc configuration solutions should also work here.</p>"},{"location":"howto/how%20to%20debug%20dictionary%20js/","title":"Debug dictionary JS","text":""},{"location":"howto/how%20to%20debug%20dictionary%20js/#background","title":"background","text":"<p>When some js functions do not work as expected, this article tries to give a debug solution to pinpoint the problem.</p>"},{"location":"howto/how%20to%20debug%20dictionary%20js/#web-inspector-devtools","title":"Web inspector (DevTools)","text":"<p>GoldenDict-ng has embedded an inspector, which is actually chromium's DevTools. You can trigger it manually using <code>F12</code>.</p> <p>Screenshot: </p>"},{"location":"howto/how%20to%20debug%20dictionary%20js/#navigate-to-the-specified-element","title":"Navigate to the specified element","text":"<p>Click the find element and move the mouse to the specified element, click the element will navigate the source panel to the very place. </p>"},{"location":"howto/how%20to%20debug%20dictionary%20js/#modify-the-css-style","title":"Modify the CSS style","text":"<p>you can play around with the CSS to modify the appearance of the HTML and check the results.</p> <p></p>"},{"location":"howto/how%20to%20debug%20dictionary%20js/#check-javascript-events","title":"Check javascript events","text":"<ul> <li>navigate to the specified element</li> <li>check the \"Event Listeners\" panel</li> <li>pay attention to the click events</li> <li>in the following screenshot, there are two registered event listeners, one from the goldendict <code>gd-custom.js</code> and one from the HTML itself.</li> <li>click the above event listener location will locate to the right place in the JavaScript.</li> </ul> <p>If some desired event does not trigger, it can first check do the event listeners have been successfully registered. Then set a breakpoint in the right place to check whether the event has been triggered and if it can execute successfully. </p>"},{"location":"howto/how%20to%20debug%20dictionary%20js/#reproduce-the-issues","title":"Reproduce the issues","text":"<p>following your normal operations and debugging the JavaScript code and pay attention to the console output. Whether any errors happened. </p>"},{"location":"howto/how%20to%20manually%20reindex%20dictionary/","title":"Purpose","text":"<p>Sometimes you may want to manually reindex the dictionary.</p>"},{"location":"howto/how%20to%20manually%20reindex%20dictionary/#steps","title":"Steps","text":"<ol> <li>Find out the index filename of the dictionary:    You can find the index filename by right clicking on the dictionary in the dictionary bar.    </li> <li>Open the index folder:</li> <li>Exit the gd-ng:</li> <li>Delete the dictionary's index file(&amp;folder):    </li> <li>Reopen gd-ng:    The dictionary will be reindexed.</li> </ol>"},{"location":"howto/how%20to%20update%20crowdin.ts%20file/","title":"Update the crowdin.ts file","text":"<p>This project uses crowdin to organize all the transactions. When some new transactions items are added, The crowdin.ts file needs to be updated to reflect the changes. Then crowdin will automatically generate all other transactions in different languages (Though all these translations still need to be translated manually or by Machine Translation).</p>"},{"location":"howto/how%20to%20update%20crowdin.ts%20file/#how-to-update-the-crowdints-file","title":"how to update the crowdin.ts file","text":"<pre><code>lupdate.exe -no-obsolete -no-ui-lines -locations none .\\src\\   -ts .\\locale\\crowdin.ts\n</code></pre> <p>the option <code>-no-obsolete</code>  will remove obsolete items from crowdin.ts file.</p> <p>the option <code>-no-ui-lines</code> will not generate line numbers in the crowdin.ts file. The line numbers change too often, which will make too many code changes between commits.</p>"},{"location":"howto/how%20to%20use%20breadpad%20crash%20analysis/","title":"Breadpad crash analysis","text":"<p>Windows release is built with Google's breakpad.</p> <p>The <code>.dmp</code> generated is Microsoft's minidump format</p> <p>When a crash is encountered, a dump file is generated under the folder <code>crash</code>.Take the dump file as <code>a.dmp</code> for following example.</p>"},{"location":"howto/how%20to%20use%20breadpad%20crash%20analysis/#option-1-visual-studio","title":"Option 1: Visual Studio","text":"<ol> <li>Open the <code>.dmp</code> file with VS:</li> <li>Click <code>Debug with Native Only</code>:</li> <li>Click <code>Locate goldendict.pdb manually</code> -&gt; click to a path that contains the <code>.pdf</code> file (Require exact naming of <code>goldendict.pdb</code>):</li> </ol> <p>Bottom tab \u2192 <code>locals</code> \u2192 watch stack.</p>"},{"location":"howto/how%20to%20use%20breadpad%20crash%20analysis/#option-2-windbg","title":"Option 2: WinDbg","text":"<ol> <li>Grab a modern version of WinDbg https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/:</li> <li>Click Settings -&gt; Debug settings -&gt; Debugging paths -&gt; Symbol path -&gt; (add a path contains <code>goldendict.pdb</code>).</li> </ol>"},{"location":"howto/how%20to%20use%20breadpad%20crash%20analysis/#option-3-dump_syms-minidump-stackwalk","title":"Option 3: dump_syms + minidump-stackwalk","text":""},{"location":"howto/how%20to%20use%20breadpad%20crash%20analysis/#mozillarust-version-better","title":"Mozilla/Rust version (Better)","text":"<p>Download the exe files from</p> <ul> <li>https://github.com/mozilla/dump_syms</li> <li>https://github.com/rust-minidump/rust-minidump</li> </ul> <pre><code>.\\dump_syms.exe goldendict.pdb &gt; goldendict.sym\n\n.\\minidump-stackwalk.exe .\\crash.dmp .\\goldendict.sym &gt; f.txt\n</code></pre>"},{"location":"howto/how%20to%20use%20breadpad%20crash%20analysis/#google-version","title":"Google version","text":"<p>Part of Google breakpad's repo. Grab them from random places of internet (e.g. minidump-tools).</p> <ol> <li> <p><code>dump_syms.exe GoldenDict.pdb &gt; GoldenDict.sym</code>: The content of GoldenDict.sym is like this: <pre><code>MODULE windows x86_64 904B2C52C1EC411D9D0271445CAD6DCD2 GoldenDict.pdb\nINFO CODE_ID 645510C96CC000 GoldenDict.exe\n</code></pre></p> </li> <li> <p>Create a folder such as <code>symbols</code>  and a series of folders like this:</p> </li> </ol> <p><pre><code>GoldDict.exe\na.dmp                 (A)\nsymbols\n\u2514\u2500GoldenDict.pdb    (B)\n    \u2514\u2500904B2C52C1EC411D9D0271445CAD6DCD2   (C)\n         \u2514\u2500GoldenDict.sym\n</code></pre> - <code>A</code>   this is the dump file - <code>B</code>   this is a folder name - <code>C</code>   this folder takes the name from the first line of <code>GoldenDict.sym</code> file</p> <ol> <li>Analysis the dump file like this: <pre><code>minidump_stackwalk.exe  -s a.dmp symbols &gt; a.txt\n</code></pre></li> <li>Check the a.txt file to find the possible crash reason. Usually it will point to the actual crash line number of the source code.</li> </ol>"},{"location":"howto/ocr/","title":"OCR Integration","text":""},{"location":"howto/ocr/#current-situation","title":"Current Situation","text":"<p>GoldenDict offered a functionality to translate the word under cursor on Windows in the past, but the technique used there is old and does not work crossplatformly.</p> <p>However, any OCR program that allows you to set \"after capturing action\" can be easily used in conjunction with GoldenDict.</p> <p>A few examples are provided below, but there are many options:</p>"},{"location":"howto/ocr/#capture2text","title":"Capture2Text","text":"<p>Capture2Text can call executable after capturing, and you can set the executable to GoldenDict.</p> <p>Detailed usage document: Capture2Text</p> <p>Capture2Text Download</p> <p>For example, change the Output action <code>Call Executable</code> to <code>path_to_the_GD_executable\\GoldenDict.exe \"${capture}\"</code></p> <p>Then press Win+Q and select a region. After capturing a word, Capture2Text will forward the word to GoldenDict. If GoldenDict's Popup is enabled, it will show up.</p> <p></p> <p>The hotkeys can be configured:</p> <p></p> <p>Capture2Text can also obtain word near the cursor without selecting a region via the \"Forward Text Line Capture\" by pressing  Win+W  <p>you may want to enable \"First word only\" so that only a single word would be captured</p> <p></p>"},{"location":"howto/ocr/#use-capture2text-on-linux","title":"Use Capture2Text on Linux","text":"<p>Capture2Text does not have a Linux version, but I have ported it to Linux https://github.com/xiaoyifang/Capture2Text thanks to Capture2Text Linux Port and sikmir.</p> <p></p>"},{"location":"howto/ocr/#shortcutsapp-apples-ocr","title":"Shortcuts.app &amp; Apple's OCR","text":"<p>Enable the Clipboard monitoring of GoldenDict, then create a \"Shortcut\" that will interactively take a screenshot and change the clipboard.</p> <p></p> <p>You may also add additional capabilities like only getting the first word</p> <p></p>"},{"location":"howto/ocr/#tesseract-via-command-line","title":"Tesseract via command line","text":"<p>On Linux, you can combine command line screenshot then pass the output image to Tesseract then pass the text result to <code>goldendict</code></p> <p>Example with spectacle (KDE) and grim (wayland/wlroots)</p> <pre><code>#!/usr/bin/env bash\n\nset -e\n\ncase $DESKTOP_SESSION in\n    sway)\n        grim -g \"$(slurp)\" /tmp/tmp.just_random_name.png\n    ;;\n    plasmawayland | plasma)\n        spectacle --region --nonotify --background \\\n        --output /tmp/tmp.just_random_name.png\n    ;;\n    *)\n        echo \"Failed to know desktop type\"\n        exit 1\n    ;;\nesac\n\n# note that tesseract will apppend .txt to output file\ntesseract /tmp/tmp.just_random_name.png /tmp/tmp.just_random_name --oem 1  -l eng\n\ngoldendict \"$(cat /tmp/tmp.just_random_name.txt)\"\n\nrm /tmp/tmp.just_random_name.png\nrm /tmp/tmp.just_random_name.txt\n</code></pre>"}]}